package org.eclipse.glsp.example.javaemf.handler;

import java.util.List;
import java.util.Optional;

import org.eclipse.emf.common.command.Command;
import org.eclipse.emf.edit.domain.EditingDomain;
import org.eclipse.glsp.conceptap.model.ConceptMap;
import org.eclipse.glsp.conceptap.model.ModelPackage;
import org.eclipse.glsp.server.emf.EMFIdGenerator;
import org.eclipse.glsp.server.emf.EMFOperationHandler;
import org.eclipse.glsp.server.emf.model.notation.Diagram;
import org.eclipse.glsp.server.emf.notation.EMFNotationModelState;
import org.eclipse.glsp.server.operations.ChangeRoutingPointsOperation;
import org.eclipse.glsp.server.types.ElementAndRoutingPoints;

import com.google.inject.Inject;

public class UpdateRoutingPointHandler extends EMFOperationHandler<ChangeRoutingPointsOperation> {

    @Inject
    protected EMFNotationModelState modelState;

    @Inject
    protected EMFIdGenerator idGenerator;

    @Override
    public Optional<Command> createCommand(ChangeRoutingPointsOperation operation) {
        ConceptMap conceptMap = modelState.getSemanticModel(ConceptMap.class).orElseThrow();
        Diagram diagram = modelState.getNotationModel();
        EditingDomain editingDomain = modelState.getEditingDomain();
        
        List<ElementAndRoutingPoints> routingPoints = operation.getNewRoutingPoints();
        
        // Crear un comando para cambiar los puntos de enrutamiento del elemento
        Command command = Command.create(editingDomain, elementId,
            ModelPackage.Literals.MY_ELEMENT__ROUTING_POINTS, newRoutingPoints);
        
        // Devolver el comando envuelto en un Optional
        return Optional.of(command);
    }
    
}
